#include <stdbool.h>

typedef enum {
  TOKENTYPE_UNKNOWN,
  TOKEN_WORD,
  TOKEN_STRING,
  TOKEN_INTEGER,
  TOKEN_FLOATING,
  SYMBOL_TILDE,
  SYMBOL_EXCLAIM2,
  SYMBOL_EXCLAIM,
  SYMBOL_AT,
  SYMBOL_POUND,
  SYMBOL_DOLLAR,
  SYMBOL_PERCENT,
  SYMBOL_CARET,
  SYMBOL_AMPER2,
  SYMBOL_AMPER,
  SYMOBL_STAR2,
  SYMOBL_STAR,
  SYMBOL_LPAREN,
  SYMBOL_RPAREN,
  SYMBOL_ARROW,
  SYMBOL_DASH,
  SYMBOL_PLUS,
  SYMBOL_EQUAL,
  SYMBOL_EQUAL2,
  SYMBOL_LBRACE,
  SYMBOL_RBRACE,
  SYMBOL_LBRACKET,
  SYMBOL_RBRACKET,
  SYMBOL_PIPE,
  SYMBOL_BACKSLASH,
  SYMBOL_COLON,
  SYMBOL_SEMICOLON,
  SYMBOL_NOTEQUAL,
  SYMBOL_LESSTHANEQUAL,
  SYMBOL_LESSTHAN,
  SYMBOL_COMMA,
  SYMBOL_GREATERTHANEQUAL,
  SYMBOL_GREATERTHAN,
  SYMBOL_PERIOD,
  SYMBOL_QUESTION2,
  SYMBOL_QUESTION,
  SYMBOL_FORWARDSLASH,
  KEYWORD_AND,
  KEYWORD_OR,
  KEYWORD_NOT,
  KEYWORD_RETURN,
  KEYWORD_FOR,
  KEYWORD_WHILE,
  KEYWORD_IF,
  KEYWORD_ELSE,
  KEYWORD_FUNCTION,
  KEYWORD_METHOD,
  KEYWORD_CLASS,
  KEYWORD_CONST,
  KEYWORD_READONLY,
  KEYWORD_FIELD,
  ENDLINE
} TokenType;

TokenType symbol_type(const char word[]);
const char *token_type_to_str(TokenType token_type);
TokenType resolve_type(const char word[], int word_len);
bool is_start_of_symbol(const char word[]);
const char *is_start_of_comment(const char word[]);
